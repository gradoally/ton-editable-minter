#!/usr/bin/fift -s
"TonUtil.fif" include
"Asm.fif" include

<{

  SETCP0 ACCEPT
  now PUSHINT
  "collection-minter/nft-collection-minter.fif" include PUSHREF SETCODE
  
}>c =: nft-collection-minter-code

"EQD1TQckz0CVmk7u39LAaTgs1mqKhmamA0Lp9qEPUxWDPBGx" parse-smc-addr drop 2=: owner_addr // parse owner_addr

<{

  SETCP0 ACCEPT
  now PUSHINT
  "collection/nft-collection-editable.fif" include PUSHREF SETCODE
  
}>c =: nft-collection-code

<b 
  0 32 u, // seqno
  owner_addr Addr, // owner address
  nft-collection-code ref, // collection code

b> =: contract_storage

0 =: wc

<b 
  
  b{001} s, 
  nft-collection-minter-code ref, 
  b{1} s,
  contract_storage ref, 
  null dict, 
  
b>

dup =: state_init
dup hashu wc swap 2constant contract_addr

contract_addr .addr cr

contract_addr "src/build/collection-minter/nft-collection-minter.addr" save-address-verbose

."NFT collection minter non-bounceable address (for init): " contract_addr 7 .Addr cr
."NFT collection minter bounceable address (for later access): " contract_addr 6 .Addr cr


<b b> =: init_message


<b 

  b{1000100} s, 
  contract_addr addr,
  b{000010} s, 
  state_init <s s, 
  b{0} s,
  init_message <s s,

b>

2 boc+>B

"src/build/collection-minter/nft-collection-minter-query.boc" tuck B>file
."(Saved nft-collection-minter contract creating query to file " type .")" cr

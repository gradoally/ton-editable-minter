;; Storage
;;
;; seqno int
;; owner slice
;; collection_code cell

cell calculate_collection_state_init(cell collection_content, cell collection_code) {

  return 
    begin_cell()
        .store_uint(0, 2)
        .store_dict(collection_code)
        .store_dict(collection_content)
        .store_uint(0, 1)
    .end_cell();
}

slice calculate_collection_address(int wc, cell state_init) {

  return 
    begin_cell()
        .store_uint(4, 3)
        .store_int(wc, 8)
        .store_uint(cell_hash(state_init), 256)
    .end_cell()
    .begin_parse();
}

() deploy_collection(cell collection_code, cell collection_content) impure {

  cell state_init = calculate_collection_state_init(collection_content, collection_code);

  slice collection_address = calculate_collection_address(workchain(), state_init);

  var msg = 
    begin_cell()
        .store_uint(0x18, 6)
        .store_slice(collection_address)
        .store_coins(100000000)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(collection_content);

  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors

}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {

}

() recv_external(slice in_msg) impure {

    var seqno = in_msg~load_uint(32);
    var ds = get_data().begin_parse();
    var storage_seqno = ds~load_uint(32);
    throw_unless(33, seqno == storage_seqno);

    accept_message();

    int op = in_msg~load_uint(32);

    slice addr = ds~load_msg_addr();
    cell nft-collection-code = ds~load_ref();

    ;; Обновляем C4, чтобы поменять seqno, адрес кладем как лежал

    set_data(
        begin_cell()
            .store_uint(storage_seqno + 1, 32)
            .store_slice(addr)
            .store_ref(nft-collection-code)
        .end_cell()
    );

    if (op == 1) { ;; deploy new collection

        deploy_collection(

            nft-collection-code, ;; collection code
            in_msg~load_ref() ;; collection data

        );

        return ();

        {-

        ;; send 0.1 то owner test
    
        var msg = 
            begin_cell()
                .store_uint(0x18, 6)
                .store_slice(addr)
                .store_grams(100000000)
                .store_uint(0, 107)
            .end_cell();

        send_raw_message(msg, 3);

        return();

        -}

    }

}

int seqno() method_id {
    return get_data().begin_parse().preload_uint(32);
}